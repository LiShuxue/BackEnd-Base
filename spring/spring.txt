spring1-->注入基本的数据类型，字符串等。注入就是赋值
spring2-->注入一个对象。（软盘、U盘存储）
spring3-->通过静态工厂（或非静态）方法来取得某个对象（不是太重要）
spring4-->通过spring来调用有参构造
spring5-->List,Map集合和数组及对象数组的注入
spring6-->给一个抽象方法注入返回值
spring7-->通过实现接口来在方法执行前后切入内容--切日志。这是通过代理对象的拦截功能实现
spring8-->通过代理对象来扩充接口，扩充功能，为代理对象加入新方法
spring9-->通过aop来实现在方法前面切入日志
spring10-->通过aop来实现在方法前后都切入日志，pointcut重用
spring11-->通过注解切入日志
spring12-->通过aop来实现在方法前后都切入日志， pointcut重用，以及将两个方法写在一个类中
spring13-->通过注解实现上面的项目。可以处理返回值的AfterReturning
spring14-->aop:around标签进行切入（拦截器的原理）
spring15-->Around注解进行切入（拦截器的原理）
spring16-->用事务管理某个方法，使方法中的内容要么都执行，要么都不执行
spring17-->对上面的升级，上面是在dao层，不规范，这个在service层
spring18-->对上面再次升级，通过注解切入事务



struts2:表现层框架技术
hibernate：持久层框架技术
spring：业务层框架技术

IoC:高层模块不应该依赖于低层模块，而模块都必须依赖于抽象
高层模块，通常指的是业务逻辑。
低层模块，通常指的是数据的存取设计。

spring核心:IoC，注入，切入(切日志，切事务)，springmvc

<property name="helloword" value="hello"/>可以为bean类的属性设置属性值，name为属性名，value为值
以后，通过spring来获取这个对象，它的属性值将是你自己配置的值hello，不用spring来获取，它依然是null

<property name="writer">
	<ref bean="writer"/>
</property>可以引用bean定义文件中的其他的 bean，用ref bean=""

//加载src下的xml
ApplicationContext context = new ClassPathXmlApplicationC0ontext("applicationContext.xml");
//获得xml中配置的HelloBean对象，getBean参数就是xml中的id
HelloBean hello1 = (HelloBean)context.getBean("helloBean");

spring默认bean 是单例的。就是你每次context.getBean("helloBean")得到的都是同一个HelloBean对象。
在 <bean> 上使用属性   scope="prototype" 就取消单例

使用ApplicationContext来取代BeanFactory,有三个实现类
1.FileSystemXmlApplicationContext：可指定XML定义文件的相对或绝对路径读取xml定义文件
2.ClassPathXmlApplicationContext：从classpath设置路径中读取xml定义文件
3.XmlWebApplicationContext：在web应用程序的文件架构中，指定相对位置读取xml定义文件

<constructor-arg>
	<value>18</value>
</constructor-arg>可以在调有参构造方法时传参

<ref bean> 是寻找全局中的bean; <ref local> 是寻找本xml文件中的bean 

集合，数组的注入用list标签，Map用map标签。赋值时，基本类型和字符串用value标签，对象用ref标签。Map的赋值用entry标签

执行切入要实现MethodBeforeAdvice，AfterReturningAdvice接口。或者直接实现一个接口MethodInterceptor，两个功能都在一个类中

执行切入的时候要在配置文件中这样写
<bean id="interceptorProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
		<property name="proxyInterfaces" value="com.lsx.demo.IHello"/><!-- 代理对象要实现的接口 -->
		<property name="target" ref="helloSpeaker"/><!-- 我要代理的对象是谁 -->
		<property name="interceptorNames"><!-- 我要加入的功能，就是定义的类的实例 -->
			<list>
				<value>logInterceptor</value><!-- 这种写法是将在前后切入的功能写在一个类中 -->
			</list>
		</property>
</bean>

aop 面向切面编程

三个重要的概念
Join Point：连接点，程序运行的某个阶段点，比如方法的调用，异常的抛出
一。切入点，Pointcut，是连接点的集合，它是程序中需要注入Advice 的位置的集合，
	指明Advice要在什么样的条件下才能被触发。
二。通知，Advice，它是某个连接点所采用的处理逻辑，也就是向连接点注入的代码。
	例如：输出的日志信息   就是一个Advice
三。Advisor，是Pointcut和Advice的配置器，它包括Pointcut和Advice，
	是将Advice注入程序中Pointcut位置的代码

将一个类设置为@Aspect 
在方法上加入 @Before("execution(* com.zyw.demo18.IHello.*(..))")表示IHello接口的哪些方法被调用之前，切入以下方法
在方法上加入 @After("execution(* com.zyw.demo18.IHello.*(..))")表示在IHello接口的哪些方法被调用之后，切入以下方法
需要在配置文件中加入<aop:aspectj-autoproxy/> 来启用注解

切入点的定义分为两个部分，表示式（expression）和签名（signature）
表示式语法格式：
execution(
	modifiers-pattern?			//访问修饰符
	ret-type-pattern			//返回值类型
	declaring-type-pattern?		//类的路径
	name-pattern(param-pattern)	//方法名（参数）
	throws-pattern?				//异常类型
)
?表示可以省去
在某个部分使用 * 表示匹配所有类型。
返回值类型大部分都使用*
方法名使用* 表示所有方法

()空括号，表示没有参数，(type)表示类型为type的参数，
(*,String)表示有两个参数，第一个无所谓，第二个是字符串
(..)表示0个或多个参数
-----------------------------------------
execution(public * *(..))	匹配任何公开方法

execution(* hello*(..))		匹配所有hello开头的方法

execution(* com.zyw.demo.IHello.*(..))	匹配IHello接口所有声明的方法

execution(* com.zyw.service.*.*(..))	匹配com.zyw.service包下声明的所有方法

execution(* com.zyw.service..*.*(..))	匹配com.zyw.service包或子包下声明的所有方法

如果只是要定义符合某些类型，可以使用within

within(com.zyw.service.*)	匹配com.zyw.service包下所有的方法

within(com.zyw.service..*)	匹配com.zyw.service包或子包下所有的方法

建立一个事务管理器
org.springframework.orm.hibernate3.HibernateTransactionManager

建立一个userdao的事务代理对象
org.springframework.transaction.interceptor.TransactionProxyFactoryBean

	