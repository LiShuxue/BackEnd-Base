1.Assigned
主键由应用逻辑产生，数据交由Hibernate保存时，主键值已经设置完毕，无需Hibernate干预。

2.hilo
通过hi/lo算法实现的主键生成机制，需要额外的数据库表保存主键生成历史状态。

3.seqhilo
与hilo类似，通过hi/lo算法实现的主键生成机制，只是主键历史状态保存在Sequence中，适用于支持Sequence的数据库，如Oracle

4.increment
主键按数值顺序递增。此方式的实现机制为在当前应用实例中维持一个变量，以保存着当前的最大值，之后每次需要生成主键的时候将此值加1作为主键。如果多个数据库实例访问同一个数据库，可能会生成相同主键。

5.identity
采用数据库提供的主键生成机制，如SQL Server，MySQL中的自增生成机制。

6.sequence
采用数据库提供的sequence机制生成主键，如Oracle Sequence。

7.native
有Hibernate根据数据库适配器中的定义，自动采用identity，hilo，sequence的其中一种作为主键生产方式。

8.  uuid.hex
由Hibernate基于128位唯一值生成算法，根据当前设备IP，时间，JVM启动时间，内部自增量等4个参数生成十六进制数值作为主键。该算法在最大程度上保证了产生ID的唯一性，即使是在多个实例并发运行的情况下。

9. uuid.string与uuid.hex类似，只是生成的主键未进行编码（长度16位）。在某些数据库中可能出问题。

10.foreign使用外部表的字段作为主键。

11.select Hibernate3中新引入的主键获取机制，主要针对遗留系统的改造工程。